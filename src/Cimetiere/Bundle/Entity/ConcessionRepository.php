<?php

namespace Cimetiere\Bundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension;

/*
 * ConcessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConcessionRepository extends EntityRepository {

    public function listecodeGestionConcession($term) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c.codeGestionConcession')
                ->where('c.codeGestionConcession LIKE :term1 OR c.codeGestionConcession LIKE :term2 OR c.codeGestionConcession LIKE :term3')
                ->setParameter('term1', '%' . $term)
                ->setParameter('term2', $term . '%')
                ->setParameter('term3', '%' . $term . '%');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = $data['codeGestionConcession'];
        }

        return $array;
    }

    public function listenbPlaces($term) {
        $qb = $this->createQueryBuilder('c');

        $qb->select('c.nbPlaces')
                ->where('c.nbPlaces LIKE :term1 OR c.nbPlaces LIKE :term2 OR c.nbPlaces LIKE :term3')
                ->setParameter('term1', '%' . $term)
                ->setParameter('term2', $term . '%')
                ->setParameter('term3', '%' . $term . '%');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = $data['nbPlaces'];
        }

        return $array;
    }
    
    public function listenumeroTitreConcession($term) {
        $qb = $this->createQueryBuilder('c');

        $qb->select('c.numeroTitreConcession')
                ->where('c.numeroTitreConcession LIKE :term1 OR c.numeroTitreConcession LIKE :term2 OR c.numeroTitreConcession LIKE :term3')
                ->setParameter('term1', '%' . $term)
                ->setParameter('term2', $term . '%')
                ->setParameter('term3', '%' . $term . '%');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach ($arrayAss as $data) {
            $array[] = $data['numeroTitreConcession'];
        }

        return $array;
    }
    

    public function findEntities($codeGestionConcession, $nbPlaces, $dateEcheance, $dateDerniereAcquisition, $numeroTitreConcession) {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $qb = $this->createQueryBuilder('c');
        if ($codeGestionConcession != NULL) {
            $qb->andWhere('c.codeGestionConcession LIKE :data')->setParameter('data', '%' . $codeGestionConcession . '%');
        }
        if ($nbPlaces != NULL) {
            $qb->andWhere('c.nbPlaces LIKE :data')->setParameter('data', '%' . $nbPlaces . '%');
        }
//        if ($dateEcheance != NULL) {
//            $yearEcheance=$dateEcheance->format('Y');
//            $qb->andWhere('YEAR(c.dateEcheance) != :data')->setParameter('data',$yearEcheance);
//        }
//        if ($dateDerniereAcquisition != NULL) {
//            $qb->andWhere('c.dateDerniereAcquisition <= :data')->setParameter('data', $dateDerniereAcquisition);
//        }
        if ($numeroTitreConcession != NULL) {
            $qb->andWhere('c.numeroTitreConcession LIKE :data')->setParameter('data', '%' . $numeroTitreConcession . '%');
        }
        $qb->orderBy('c.codeGestionConcession', 'ASC');
        return $qb->getQuery()->getResult();
    }

}
